{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 10\n",
    "# Test Hypothesis: Higher delays tend to have higher fuel consumption per passenger\n",
    "\n",
    "Note: fuel cons is around 3-4 liters per passenger per 100km in the industry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: get the number of passengers and total distance monthly per carrier\n",
    "### Step 1.1 Find if flights transporting freight and mail are operating under the same companies and flights transporting passengers\n",
    "### Step 1.2 Find out number of passengers that were carried (monthly) by different air carriers\n",
    "### Step 1.3 Find out distance covered monthly by different air carriers  \n",
    "This information is found in the passengers DB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\derob\\anaconda3\\lib\\site-packages\\numpy\\lib\\arraysetops.py:569: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask |= (ar1 == a)\n"
     ]
    }
   ],
   "source": [
    "# passengers DB\n",
    "passengers = pd.read_csv('passengers_cleaned.csv', index_col = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2350494 entries, 0 to 2350496\n",
      "Data columns (total 38 columns):\n",
      " #   Column                 Dtype  \n",
      "---  ------                 -----  \n",
      " 0   departures_scheduled   float64\n",
      " 1   departures_performed   float64\n",
      " 2   payload                float64\n",
      " 3   seats                  float64\n",
      " 4   passengers             float64\n",
      " 5   freight                float64\n",
      " 6   mail                   float64\n",
      " 7   distance               float64\n",
      " 8   ramp_to_ramp           float64\n",
      " 9   air_time               float64\n",
      " 10  unique_carrier         object \n",
      " 11  airline_id             int64  \n",
      " 12  unique_carrier_name    object \n",
      " 13  region                 object \n",
      " 14  carrier                object \n",
      " 15  carrier_name           object \n",
      " 16  carrier_group          int64  \n",
      " 17  carrier_group_new      int64  \n",
      " 18  origin_airport_id      int64  \n",
      " 19  origin_city_market_id  int64  \n",
      " 20  origin                 object \n",
      " 21  origin_city_name       object \n",
      " 22  origin_country         object \n",
      " 23  origin_country_name    object \n",
      " 24  dest_airport_id        int64  \n",
      " 25  dest_city_market_id    int64  \n",
      " 26  dest                   object \n",
      " 27  dest_city_name         object \n",
      " 28  dest_country           object \n",
      " 29  dest_country_name      object \n",
      " 30  aircraft_group         int64  \n",
      " 31  aircraft_type          int64  \n",
      " 32  aircraft_config        int64  \n",
      " 33  year                   int64  \n",
      " 34  month                  int64  \n",
      " 35  day                    int64  \n",
      " 36  distance_group         object \n",
      " 37  class                  object \n",
      "dtypes: float64(10), int64(13), object(15)\n",
      "memory usage: 699.4+ MB\n"
     ]
    }
   ],
   "source": [
    "passengers.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The passengers DB is containing data from 2015 to 2019\n"
     ]
    }
   ],
   "source": [
    "# get date range\n",
    "print(f'The passengers DB is containing data from {min(passengers.year)} to {max(passengers.year)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "961571\n"
     ]
    }
   ],
   "source": [
    "# keep only 2018 and 2019 (flights database only has data from 2018 to 2019)\n",
    "db_passengers = passengers[passengers.year >= 2018]\n",
    "print(len(db_passengers))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payload</th>\n",
       "      <th>freight</th>\n",
       "      <th>mail</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9.615710e+05</td>\n",
       "      <td>9.615710e+05</td>\n",
       "      <td>9.615710e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.727807e+05</td>\n",
       "      <td>1.063658e+05</td>\n",
       "      <td>2.902887e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.541638e+06</td>\n",
       "      <td>5.417455e+05</td>\n",
       "      <td>2.780174e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.147000e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.672880e+05</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.073554e+06</td>\n",
       "      <td>3.465000e+03</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.723840e+07</td>\n",
       "      <td>4.329936e+07</td>\n",
       "      <td>8.163150e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            payload       freight          mail\n",
       "count  9.615710e+05  9.615710e+05  9.615710e+05\n",
       "mean   8.727807e+05  1.063658e+05  2.902887e+03\n",
       "std    1.541638e+06  5.417455e+05  2.780174e+04\n",
       "min    0.000000e+00  0.000000e+00  0.000000e+00\n",
       "25%    4.147000e+04  0.000000e+00  0.000000e+00\n",
       "50%    2.672880e+05  0.000000e+00  0.000000e+00\n",
       "75%    1.073554e+06  3.465000e+03  0.000000e+00\n",
       "max    4.723840e+07  4.329936e+07  8.163150e+06"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get idea of freight and mail weight compared to payload\n",
    "db_passengers[['payload', 'freight', 'mail']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Only passengers 444145\n",
      "Only mail 2591\n",
      "Only freight 102014\n",
      "Passengers and mail 18238\n",
      "Only passengers and freight 207065\n",
      "Only mail and freight 19435\n",
      "Passengers, freight and mail 119851\n",
      "None of them 48232\n"
     ]
    }
   ],
   "source": [
    "# find number of data points corresponding to flights containing only passengers, freight or mail, or combinations of the three\n",
    "\n",
    "print(f'Only passengers {len(db_passengers[(db_passengers.passengers > 0) & (db_passengers.freight == 0) & (db_passengers.mail == 0)])}')\n",
    "print(f'Only mail {len(db_passengers[(db_passengers.passengers == 0) & (db_passengers.freight == 0) & (db_passengers.mail > 0)])}')\n",
    "print(f'Only freight {len(db_passengers[(db_passengers.passengers == 0) & (db_passengers.freight > 0) & (db_passengers.mail == 0)])}')\n",
    "print(f'Passengers and mail {len(db_passengers[(db_passengers.passengers > 0) & (db_passengers.freight == 0) & (db_passengers.mail > 0)])}')\n",
    "print(f'Only passengers and freight {len(db_passengers[(db_passengers.passengers > 0) & (db_passengers.freight > 0) & (db_passengers.mail == 0)])}')\n",
    "print(f'Only mail and freight {len(db_passengers[(db_passengers.passengers == 0) & (db_passengers.freight > 0) & (db_passengers.mail > 0)])}')\n",
    "print(f'Passengers, freight and mail {len(db_passengers[(db_passengers.passengers > 0) & (db_passengers.freight > 0) & (db_passengers.mail > 0)])}')\n",
    "print(f'None of them {len(db_passengers[(db_passengers.passengers == 0) & (db_passengers.freight == 0) & (db_passengers.mail == 0)])}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "961571\n",
      "913339\n"
     ]
    }
   ],
   "source": [
    "# drop data with none of them\n",
    "print(len(db_passengers))\n",
    "db_passengers = db_passengers[(db_passengers.passengers > 0) | (db_passengers.freight > 0) | (db_passengers.mail > 0)]\n",
    "print(len(db_passengers))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " CARRIER LIST OPERATING EXCLUSIVELY PASSENGER FLIGHTS \n",
      " ['IFQ', 'LV', '10Q', '15Q', '24Q', 'OR', 'PD', 'PY', 'QK', 'R0', 'SVW', 'TS', 'VR', '2UQ', 'WS', 'AX', 'G4', 'G7', 'GL', 'TR', 'BX', '3EQ', 'AN', '3SD', 'GEQ', '27Q', '4B', '3U', 'CAZ', '1UQ', '0UQ', 'CRV', '04Q', 'LXQ', '7C', '0CQ', '1XQ', '2KQ', 'HYP', 'WG', 'ZX', 'LJ', '12Q', '0J', '14Q', 'EQ', 'F9', 'B0', '02Q', 'G3', 'LS', '0WQ', '1AQ', '1EQ', '1WQ', '3M', 'BCQ', 'D8', '17Q', 'Q6', 'UP', 'VH', 'SEB', 'YR', 'BC', 'XP', 'WL', 'MW', '26Q', '0Q', '1ZQ', 'LDQ', '0BQ', '9V', 'JVQ', 'TEQ', 'WGT', '25Q', 'R3', '1HQ', 'KFQ', 'FP', 'FYQ', 'PP', '38Q', 'EAU', '07Q', 'LDM', '1LQ', 'NK', '2HQ', 'C5', '9X', 'OO', '3BQ', '3E', 'WST', 'AAT', '1QQ', 'A0', 'ZK', 'VW', 'VX', '30Q', 'PF', 'PBQ', '2JQ', '1PQ']\n"
     ]
    }
   ],
   "source": [
    "# See if there are airlines specific to passenger flights\n",
    "\n",
    "# Carrier list for flights containing only passengers\n",
    "carrier_passengers = db_passengers[(db_passengers.passengers > 0) & (db_passengers.freight == 0) & (db_passengers.mail == 0)]['unique_carrier'].unique()\n",
    "\n",
    "# Carrier list for everything other than exclusively passengers\n",
    "carrier_other = db_passengers.drop(db_passengers[(db_passengers.passengers > 0) & (db_passengers.freight == 0) & (db_passengers.mail == 0)].index,axis=0)['unique_carrier'].unique()\n",
    "\n",
    "# print carrier list that operate only passengers and no mail or freight\n",
    "carrier_only_passengers = []\n",
    "for carrier in carrier_passengers:\n",
    "    if carrier not in carrier_other:\n",
    "        carrier_only_passengers.append(carrier)\n",
    "print(f\" CARRIER LIST OPERATING EXCLUSIVELY PASSENGER FLIGHTS \\n {carrier_only_passengers}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "913339\n",
      "186509\n"
     ]
    }
   ],
   "source": [
    "# filter the database with the list of carriers operating exclusively passenger flights\n",
    "print(len(db_passengers))\n",
    "db_passengers = db_passengers[db_passengers.unique_carrier.isin(carrier_only_passengers)]\n",
    "print(len(db_passengers))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>passengers</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">02Q</th>\n",
       "      <th rowspan=\"3\" valign=\"top\">2018</th>\n",
       "      <th>3</th>\n",
       "      <td>25.0</td>\n",
       "      <td>3339.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>119.0</td>\n",
       "      <td>8585.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>86.0</td>\n",
       "      <td>12138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2019</th>\n",
       "      <th>2</th>\n",
       "      <td>552.0</td>\n",
       "      <td>11868.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>158.0</td>\n",
       "      <td>12035.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">ZX</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2019</th>\n",
       "      <th>8</th>\n",
       "      <td>116336.0</td>\n",
       "      <td>17420.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>78375.0</td>\n",
       "      <td>17420.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>56535.0</td>\n",
       "      <td>12970.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>24624.0</td>\n",
       "      <td>6436.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>19327.0</td>\n",
       "      <td>5260.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1749 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           passengers  distance\n",
       "unique_carrier year month                      \n",
       "02Q            2018 3            25.0    3339.0\n",
       "                    4           119.0    8585.0\n",
       "                    6            86.0   12138.0\n",
       "               2019 2           552.0   11868.0\n",
       "                    5           158.0   12035.0\n",
       "...                               ...       ...\n",
       "ZX             2019 8        116336.0   17420.0\n",
       "                    9         78375.0   17420.0\n",
       "                    10        56535.0   12970.0\n",
       "                    11        24624.0    6436.0\n",
       "                    12        19327.0    5260.0\n",
       "\n",
       "[1749 rows x 2 columns]"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get monthly number of passengers and total distance per carrier\n",
    "db_passengers = pd.DataFrame(db_passengers.groupby(['unique_carrier', 'year', 'month'])[['passengers', 'distance']].sum())\n",
    "db_passengers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Find out monthly total fuel comsumption per air carrier.\n",
    "This information can be found in the fuels DB\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fuels db\n",
    "fuel = pd.read_csv('fuel_cleaned.csv', index_col = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 3025 entries, 1 to 3034\n",
      "Data columns (total 25 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   month              3025 non-null   int64  \n",
      " 1   airline_id         3025 non-null   float64\n",
      " 2   unique_carrier     3025 non-null   object \n",
      " 3   carrier            3025 non-null   object \n",
      " 4   carrier_name       3025 non-null   object \n",
      " 5   carrier_group_new  3025 non-null   int64  \n",
      " 6   sdomt_gallons      3025 non-null   float64\n",
      " 7   satl_gallons       3025 non-null   float64\n",
      " 8   spac_gallons       3025 non-null   float64\n",
      " 9   slat_gallons       3025 non-null   float64\n",
      " 10  sint_gallons       3025 non-null   float64\n",
      " 11  ts_gallons         3025 non-null   float64\n",
      " 12  tdomt_gallons      3025 non-null   float64\n",
      " 13  tint_gallons       3025 non-null   float64\n",
      " 14  total_gallons      3025 non-null   float64\n",
      " 15  sdomt_cost         3025 non-null   float64\n",
      " 16  satl_cost          3025 non-null   float64\n",
      " 17  spac_cost          3025 non-null   float64\n",
      " 18  slat_cost          3025 non-null   float64\n",
      " 19  sint_cost          3025 non-null   float64\n",
      " 20  ts_cost            3025 non-null   float64\n",
      " 21  tdomt_cost         3025 non-null   float64\n",
      " 22  tint_cost          3025 non-null   float64\n",
      " 23  total_cost         3025 non-null   float64\n",
      " 24  year               3025 non-null   int64  \n",
      "dtypes: float64(19), int64(3), object(3)\n",
      "memory usage: 614.5+ KB\n"
     ]
    }
   ],
   "source": [
    "fuel.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tdomt_gallons</th>\n",
       "      <th>tint_gallons</th>\n",
       "      <th>total_gallons</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>163052.0</td>\n",
       "      <td>47060.0</td>\n",
       "      <td>210112.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>284362.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>284362.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>32138000.0</td>\n",
       "      <td>28831000.0</td>\n",
       "      <td>60969000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3030</th>\n",
       "      <td>632636.0</td>\n",
       "      <td>1899102.0</td>\n",
       "      <td>2531738.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3031</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3032</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3033</th>\n",
       "      <td>21048.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21048.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3034</th>\n",
       "      <td>173448291.0</td>\n",
       "      <td>2440902.0</td>\n",
       "      <td>175889193.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3025 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      tdomt_gallons  tint_gallons  total_gallons\n",
       "1          163052.0       47060.0       210112.0\n",
       "2               0.0           0.0            0.0\n",
       "3               0.0           0.0            0.0\n",
       "4          284362.0           0.0       284362.0\n",
       "5        32138000.0    28831000.0     60969000.0\n",
       "...             ...           ...            ...\n",
       "3030       632636.0     1899102.0      2531738.0\n",
       "3031            0.0           0.0            0.0\n",
       "3032            0.0           0.0            0.0\n",
       "3033        21048.0           0.0        21048.0\n",
       "3034    173448291.0     2440902.0    175889193.0\n",
       "\n",
       "[3025 rows x 3 columns]"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# see consumption features and confirm total_gallons is the sum\n",
    "fuel[['tdomt_gallons', 'tint_gallons', 'total_gallons']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The fuels DB is containing data from 2015 to 2019\n"
     ]
    }
   ],
   "source": [
    "# get date range\n",
    "print(f'The fuels DB is containing data from {min(fuel.year)} to {max(fuel.year)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "# keep only 2018 and 2019 (flights database only has data from 2018 to 2019)\n",
    "db_fuel = fuel[fuel.year >= 2018]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>total_gallons</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">09Q</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2016</th>\n",
       "      <th>2</th>\n",
       "      <td>328697.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>551159.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>379161.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>318452.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>328601.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">ZW</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2017</th>\n",
       "      <th>8</th>\n",
       "      <td>11462.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14821.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>12882.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12089.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>43910.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3025 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           total_gallons\n",
       "unique_carrier year month               \n",
       "09Q            2016 2           328697.0\n",
       "                    3           551159.0\n",
       "                    4           379161.0\n",
       "                    5           318452.0\n",
       "                    7           328601.0\n",
       "...                                  ...\n",
       "ZW             2017 8            11462.0\n",
       "                    9            14821.0\n",
       "                    10           12882.0\n",
       "                    11           12089.0\n",
       "                    12           43910.0\n",
       "\n",
       "[3025 rows x 1 columns]"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get monthly consumption per carrier\n",
    "db_fuel = pd.DataFrame(fuel.groupby(['unique_carrier', 'year', 'month'])['total_gallons'].sum())\n",
    "db_fuel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Find out monthly delay per air carrier \n",
    "This information can be found in flights DB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\derob\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3146: DtypeWarning: Columns (25) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "# flights data\n",
    "flights = pd.read_csv('flights_nullsremoved.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extract month from fl_date feature\n",
    "import datetime\n",
    "\n",
    "flights['fl_date'] = pd.to_datetime(flights['fl_date'])\n",
    "flights['month'] = pd.DatetimeIndex(flights['fl_date']).month\n",
    "flights['year'] = pd.DatetimeIndex(flights['fl_date']).year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The flights DB is containing data from 2018 to 2019\n"
     ]
    }
   ],
   "source": [
    "# get date range\n",
    "print(f'The flights DB is containing data from {min(flights.year)} to {max(flights.year)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Trying code on a sample**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "flights_sample = flights[:1000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "flights_sample = flights_sample.groupby(['op_unique_carrier', 'year', 'month'])[['dep_delay', 'arr_delay']].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>dep_delay</th>\n",
       "      <th>arr_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>op_unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AA</th>\n",
       "      <th>2018</th>\n",
       "      <th>11</th>\n",
       "      <td>15337.0</td>\n",
       "      <td>15767.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MQ</th>\n",
       "      <th>2018</th>\n",
       "      <th>11</th>\n",
       "      <td>5396.0</td>\n",
       "      <td>5492.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OH</th>\n",
       "      <th>2018</th>\n",
       "      <th>11</th>\n",
       "      <td>2460.0</td>\n",
       "      <td>2311.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PT</th>\n",
       "      <th>2018</th>\n",
       "      <th>11</th>\n",
       "      <td>5763.0</td>\n",
       "      <td>5737.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              dep_delay  arr_delay\n",
       "op_unique_carrier year month                      \n",
       "AA                2018 11       15337.0    15767.0\n",
       "MQ                2018 11        5396.0     5492.0\n",
       "OH                2018 11        2460.0     2311.0\n",
       "PT                2018 11        5763.0     5737.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_sample.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "flights_sample['monthly_delay'] = flights_sample['dep_delay'] + flights_sample['arr_delay']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>dep_delay</th>\n",
       "      <th>arr_delay</th>\n",
       "      <th>monthly_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>op_unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AA</th>\n",
       "      <th>2018</th>\n",
       "      <th>11</th>\n",
       "      <td>15337.0</td>\n",
       "      <td>15767.0</td>\n",
       "      <td>31104.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MQ</th>\n",
       "      <th>2018</th>\n",
       "      <th>11</th>\n",
       "      <td>5396.0</td>\n",
       "      <td>5492.0</td>\n",
       "      <td>10888.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OH</th>\n",
       "      <th>2018</th>\n",
       "      <th>11</th>\n",
       "      <td>2460.0</td>\n",
       "      <td>2311.0</td>\n",
       "      <td>4771.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PT</th>\n",
       "      <th>2018</th>\n",
       "      <th>11</th>\n",
       "      <td>5763.0</td>\n",
       "      <td>5737.0</td>\n",
       "      <td>11500.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              dep_delay  arr_delay  monthly_delay\n",
       "op_unique_carrier year month                                     \n",
       "AA                2018 11       15337.0    15767.0        31104.0\n",
       "MQ                2018 11        5396.0     5492.0        10888.0\n",
       "OH                2018 11        2460.0     2311.0         4771.0\n",
       "PT                2018 11        5763.0     5737.0        11500.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_sample.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Running same code on flights db**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>dep_delay</th>\n",
       "      <th>arr_delay</th>\n",
       "      <th>monthly_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>op_unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">9E</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>1</th>\n",
       "      <td>204984.0</td>\n",
       "      <td>55151.0</td>\n",
       "      <td>260135.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>221215.0</td>\n",
       "      <td>84609.0</td>\n",
       "      <td>305824.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>167663.0</td>\n",
       "      <td>66252.0</td>\n",
       "      <td>233915.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>238726.0</td>\n",
       "      <td>137816.0</td>\n",
       "      <td>376542.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>176770.0</td>\n",
       "      <td>38926.0</td>\n",
       "      <td>215696.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              dep_delay  arr_delay  monthly_delay\n",
       "op_unique_carrier year month                                     \n",
       "9E                2018 1       204984.0    55151.0       260135.0\n",
       "                       2       221215.0    84609.0       305824.0\n",
       "                       3       167663.0    66252.0       233915.0\n",
       "                       4       238726.0   137816.0       376542.0\n",
       "                       5       176770.0    38926.0       215696.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get a db grouped per carrier & month\n",
    "db_flights = flights.groupby(['op_unique_carrier', 'year', 'month'])[['dep_delay', 'arr_delay']].sum()\n",
    "\n",
    "# add a column monthly_delay\n",
    "db_flights['monthly_delay'] = db_flights['dep_delay'] + db_flights['arr_delay']\n",
    "\n",
    "db_flights.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# rename unique_carrier column (it's actually op_unique_carrier)\n",
    "db_flights.index.names = ['unique_carrier', 'year', 'month']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>dep_delay</th>\n",
       "      <th>arr_delay</th>\n",
       "      <th>monthly_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">9E</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>1</th>\n",
       "      <td>204984.0</td>\n",
       "      <td>55151.0</td>\n",
       "      <td>260135.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>221215.0</td>\n",
       "      <td>84609.0</td>\n",
       "      <td>305824.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>167663.0</td>\n",
       "      <td>66252.0</td>\n",
       "      <td>233915.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>238726.0</td>\n",
       "      <td>137816.0</td>\n",
       "      <td>376542.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>176770.0</td>\n",
       "      <td>38926.0</td>\n",
       "      <td>215696.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">ZW</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2019</th>\n",
       "      <th>8</th>\n",
       "      <td>113329.0</td>\n",
       "      <td>78857.0</td>\n",
       "      <td>192186.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>94769.0</td>\n",
       "      <td>47397.0</td>\n",
       "      <td>142166.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>20075.0</td>\n",
       "      <td>-30286.0</td>\n",
       "      <td>-10211.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>92611.0</td>\n",
       "      <td>34008.0</td>\n",
       "      <td>126619.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>83745.0</td>\n",
       "      <td>28289.0</td>\n",
       "      <td>112034.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>629 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           dep_delay  arr_delay  monthly_delay\n",
       "unique_carrier year month                                     \n",
       "9E             2018 1       204984.0    55151.0       260135.0\n",
       "                    2       221215.0    84609.0       305824.0\n",
       "                    3       167663.0    66252.0       233915.0\n",
       "                    4       238726.0   137816.0       376542.0\n",
       "                    5       176770.0    38926.0       215696.0\n",
       "...                              ...        ...            ...\n",
       "ZW             2019 8       113329.0    78857.0       192186.0\n",
       "                    9        94769.0    47397.0       142166.0\n",
       "                    10       20075.0   -30286.0       -10211.0\n",
       "                    11       92611.0    34008.0       126619.0\n",
       "                    12       83745.0    28289.0       112034.0\n",
       "\n",
       "[629 rows x 3 columns]"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db_flights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge databases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": [
    "# join the three databases. The output will contain only carriers doing exclusively passenger flights\n",
    "data_merged = pd.merge(db_passengers, db_fuel, on=['unique_carrier', 'year', 'month'], how='inner')\n",
    "data_merged = pd.merge(data_merged, db_flights, on=['unique_carrier', 'year', 'month'], how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1749\n",
      "3025\n",
      "629\n",
      "105\n"
     ]
    }
   ],
   "source": [
    "print(len(db_passengers))\n",
    "print(len(db_fuel))\n",
    "print(len(db_flights))\n",
    "print(len(data_merged))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>passengers</th>\n",
       "      <th>distance</th>\n",
       "      <th>total_gallons</th>\n",
       "      <th>dep_delay</th>\n",
       "      <th>arr_delay</th>\n",
       "      <th>monthly_delay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">F9</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>1</th>\n",
       "      <td>1521016.0</td>\n",
       "      <td>603433.0</td>\n",
       "      <td>22206391.0</td>\n",
       "      <td>151613.0</td>\n",
       "      <td>83151.0</td>\n",
       "      <td>234764.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1421476.0</td>\n",
       "      <td>627069.0</td>\n",
       "      <td>20163955.0</td>\n",
       "      <td>141639.0</td>\n",
       "      <td>90013.0</td>\n",
       "      <td>231652.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1610156.0</td>\n",
       "      <td>555965.0</td>\n",
       "      <td>21438371.0</td>\n",
       "      <td>98149.0</td>\n",
       "      <td>42332.0</td>\n",
       "      <td>140481.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1567522.0</td>\n",
       "      <td>920628.0</td>\n",
       "      <td>21089364.0</td>\n",
       "      <td>154746.0</td>\n",
       "      <td>94473.0</td>\n",
       "      <td>249219.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1729577.0</td>\n",
       "      <td>1044051.0</td>\n",
       "      <td>22315422.0</td>\n",
       "      <td>202203.0</td>\n",
       "      <td>147623.0</td>\n",
       "      <td>349826.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">OO</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2019</th>\n",
       "      <th>5</th>\n",
       "      <td>3739439.0</td>\n",
       "      <td>1155138.0</td>\n",
       "      <td>8838081.0</td>\n",
       "      <td>765697.0</td>\n",
       "      <td>417611.0</td>\n",
       "      <td>1183308.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3849942.0</td>\n",
       "      <td>1373264.0</td>\n",
       "      <td>8915291.0</td>\n",
       "      <td>1104387.0</td>\n",
       "      <td>844528.0</td>\n",
       "      <td>1948915.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3935300.0</td>\n",
       "      <td>1145859.0</td>\n",
       "      <td>9566241.0</td>\n",
       "      <td>994571.0</td>\n",
       "      <td>672948.0</td>\n",
       "      <td>1667519.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3904017.0</td>\n",
       "      <td>1276194.0</td>\n",
       "      <td>8790766.0</td>\n",
       "      <td>800661.0</td>\n",
       "      <td>422672.0</td>\n",
       "      <td>1223333.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3422387.0</td>\n",
       "      <td>1115123.0</td>\n",
       "      <td>8834786.0</td>\n",
       "      <td>555741.0</td>\n",
       "      <td>155900.0</td>\n",
       "      <td>711641.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>105 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           passengers   distance  total_gallons  dep_delay  \\\n",
       "unique_carrier year month                                                    \n",
       "F9             2018 1       1521016.0   603433.0     22206391.0   151613.0   \n",
       "                    2       1421476.0   627069.0     20163955.0   141639.0   \n",
       "                    3       1610156.0   555965.0     21438371.0    98149.0   \n",
       "                    4       1567522.0   920628.0     21089364.0   154746.0   \n",
       "                    5       1729577.0  1044051.0     22315422.0   202203.0   \n",
       "...                               ...        ...            ...        ...   \n",
       "OO             2019 5       3739439.0  1155138.0      8838081.0   765697.0   \n",
       "                    6       3849942.0  1373264.0      8915291.0  1104387.0   \n",
       "                    7       3935300.0  1145859.0      9566241.0   994571.0   \n",
       "                    8       3904017.0  1276194.0      8790766.0   800661.0   \n",
       "                    9       3422387.0  1115123.0      8834786.0   555741.0   \n",
       "\n",
       "                           arr_delay  monthly_delay  \n",
       "unique_carrier year month                            \n",
       "F9             2018 1        83151.0       234764.0  \n",
       "                    2        90013.0       231652.0  \n",
       "                    3        42332.0       140481.0  \n",
       "                    4        94473.0       249219.0  \n",
       "                    5       147623.0       349826.0  \n",
       "...                              ...            ...  \n",
       "OO             2019 5       417611.0      1183308.0  \n",
       "                    6       844528.0      1948915.0  \n",
       "                    7       672948.0      1667519.0  \n",
       "                    8       422672.0      1223333.0  \n",
       "                    9       155900.0       711641.0  \n",
       "\n",
       "[105 rows x 6 columns]"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "# compute consumption (in gallons per mile and in liters per 100km) per passenger\n",
    "\n",
    "#gallons per mile per passenger\n",
    "data_merged['gallons_per_mile_per_passenger'] = (data_merged.total_gallons / data_merged.distance) / data_merged.passengers\n",
    "\n",
    "#liters per 100km per passenger (more used and understandable)\n",
    "data_merged['liters_per_100km_per_passenger'] = data_merged['gallons_per_mile_per_passenger'] * 100/(1.60934 * 0.264172)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>passengers</th>\n",
       "      <th>distance</th>\n",
       "      <th>total_gallons</th>\n",
       "      <th>dep_delay</th>\n",
       "      <th>arr_delay</th>\n",
       "      <th>monthly_delay</th>\n",
       "      <th>gallons_per_mile_per_passenger</th>\n",
       "      <th>liters_per_100km_per_passenger</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">F9</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>1</th>\n",
       "      <td>1521016.0</td>\n",
       "      <td>603433.0</td>\n",
       "      <td>22206391.0</td>\n",
       "      <td>151613.0</td>\n",
       "      <td>83151.0</td>\n",
       "      <td>234764.0</td>\n",
       "      <td>0.000024</td>\n",
       "      <td>0.005691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1421476.0</td>\n",
       "      <td>627069.0</td>\n",
       "      <td>20163955.0</td>\n",
       "      <td>141639.0</td>\n",
       "      <td>90013.0</td>\n",
       "      <td>231652.0</td>\n",
       "      <td>0.000023</td>\n",
       "      <td>0.005321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1610156.0</td>\n",
       "      <td>555965.0</td>\n",
       "      <td>21438371.0</td>\n",
       "      <td>98149.0</td>\n",
       "      <td>42332.0</td>\n",
       "      <td>140481.0</td>\n",
       "      <td>0.000024</td>\n",
       "      <td>0.005633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1567522.0</td>\n",
       "      <td>920628.0</td>\n",
       "      <td>21089364.0</td>\n",
       "      <td>154746.0</td>\n",
       "      <td>94473.0</td>\n",
       "      <td>249219.0</td>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.003437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1729577.0</td>\n",
       "      <td>1044051.0</td>\n",
       "      <td>22315422.0</td>\n",
       "      <td>202203.0</td>\n",
       "      <td>147623.0</td>\n",
       "      <td>349826.0</td>\n",
       "      <td>0.000012</td>\n",
       "      <td>0.002907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">OO</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2019</th>\n",
       "      <th>5</th>\n",
       "      <td>3739439.0</td>\n",
       "      <td>1155138.0</td>\n",
       "      <td>8838081.0</td>\n",
       "      <td>765697.0</td>\n",
       "      <td>417611.0</td>\n",
       "      <td>1183308.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3849942.0</td>\n",
       "      <td>1373264.0</td>\n",
       "      <td>8915291.0</td>\n",
       "      <td>1104387.0</td>\n",
       "      <td>844528.0</td>\n",
       "      <td>1948915.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3935300.0</td>\n",
       "      <td>1145859.0</td>\n",
       "      <td>9566241.0</td>\n",
       "      <td>994571.0</td>\n",
       "      <td>672948.0</td>\n",
       "      <td>1667519.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3904017.0</td>\n",
       "      <td>1276194.0</td>\n",
       "      <td>8790766.0</td>\n",
       "      <td>800661.0</td>\n",
       "      <td>422672.0</td>\n",
       "      <td>1223333.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3422387.0</td>\n",
       "      <td>1115123.0</td>\n",
       "      <td>8834786.0</td>\n",
       "      <td>555741.0</td>\n",
       "      <td>155900.0</td>\n",
       "      <td>711641.0</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.000545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>84 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           passengers   distance  total_gallons  dep_delay  \\\n",
       "unique_carrier year month                                                    \n",
       "F9             2018 1       1521016.0   603433.0     22206391.0   151613.0   \n",
       "                    2       1421476.0   627069.0     20163955.0   141639.0   \n",
       "                    3       1610156.0   555965.0     21438371.0    98149.0   \n",
       "                    4       1567522.0   920628.0     21089364.0   154746.0   \n",
       "                    5       1729577.0  1044051.0     22315422.0   202203.0   \n",
       "...                               ...        ...            ...        ...   \n",
       "OO             2019 5       3739439.0  1155138.0      8838081.0   765697.0   \n",
       "                    6       3849942.0  1373264.0      8915291.0  1104387.0   \n",
       "                    7       3935300.0  1145859.0      9566241.0   994571.0   \n",
       "                    8       3904017.0  1276194.0      8790766.0   800661.0   \n",
       "                    9       3422387.0  1115123.0      8834786.0   555741.0   \n",
       "\n",
       "                           arr_delay  monthly_delay  \\\n",
       "unique_carrier year month                             \n",
       "F9             2018 1        83151.0       234764.0   \n",
       "                    2        90013.0       231652.0   \n",
       "                    3        42332.0       140481.0   \n",
       "                    4        94473.0       249219.0   \n",
       "                    5       147623.0       349826.0   \n",
       "...                              ...            ...   \n",
       "OO             2019 5       417611.0      1183308.0   \n",
       "                    6       844528.0      1948915.0   \n",
       "                    7       672948.0      1667519.0   \n",
       "                    8       422672.0      1223333.0   \n",
       "                    9       155900.0       711641.0   \n",
       "\n",
       "                           gallons_per_mile_per_passenger  \\\n",
       "unique_carrier year month                                   \n",
       "F9             2018 1                            0.000024   \n",
       "                    2                            0.000023   \n",
       "                    3                            0.000024   \n",
       "                    4                            0.000015   \n",
       "                    5                            0.000012   \n",
       "...                                                   ...   \n",
       "OO             2019 5                            0.000002   \n",
       "                    6                            0.000002   \n",
       "                    7                            0.000002   \n",
       "                    8                            0.000002   \n",
       "                    9                            0.000002   \n",
       "\n",
       "                           liters_per_100km_per_passenger  \n",
       "unique_carrier year month                                  \n",
       "F9             2018 1                            0.005691  \n",
       "                    2                            0.005321  \n",
       "                    3                            0.005633  \n",
       "                    4                            0.003437  \n",
       "                    5                            0.002907  \n",
       "...                                                   ...  \n",
       "OO             2019 5                            0.000481  \n",
       "                    6                            0.000397  \n",
       "                    7                            0.000499  \n",
       "                    8                            0.000415  \n",
       "                    9                            0.000545  \n",
       "\n",
       "[84 rows x 8 columns]"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop values where total_gallons is zero\n",
    "data_merged = data_merged[data_merged.total_gallons > 0]\n",
    "data_merged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the liters_per_100km_per_passenger measure is supposed to be around 3-4 liters. Seems to be an issue here somewhere"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Consumptions per flight delays')"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot\n",
    "plt.figure(figsize=(12,7))\n",
    "plt.scatter(data_merged.monthly_delay, data_merged.liters_per_100km_per_passenger)\n",
    "plt.ylim(0, max(data_merged.liters_per_100km_per_passenger))\n",
    "plt.ylabel('consumption per passenger (in liters/100km)')\n",
    "plt.xlabel('flight delay (minutes)')\n",
    "plt.title('Consumptions per flight delays')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusion: it doesn't look like the consumption per passenger is related to flight delay. There seem to be two different distributions concerning fuel consumption:\n",
    "1. A constant fuel consuption around 0.0005\n",
    "2. A cluster of variations around 0.002 and 0.005\n",
    "This could be related to flights that are more empty than others and would lead up to a higher fuel consumption per passenger. \n",
    "Let's confirm this by removing the passengers input and looking at only fuel consumption per distance unit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "# export merged_db\n",
    "data_merged.to_csv('EDA_Task10_data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check hypothesis: Do higher delays tend to have a higher fuel consumption per mile? (include freight and mail)\n",
    "Compare consumption in gallons per mile and see if there is a relation with delays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "# re - do a passengers DB keeping all carriers\n",
    "\n",
    "db_passengers2 = passengers[passengers.year >= 2018]\n",
    "db_passengers2 = pd.DataFrame(db_passengers2.groupby(['unique_carrier', 'year', 'month'])[['passengers', 'distance']].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "# join the databases\n",
    "# join the three databases\n",
    "data_merged2 = pd.merge(db_passengers2, db_fuel, on=['unique_carrier', 'year', 'month'], how='inner')\n",
    "data_merged2 = pd.merge(data_merged2, db_flights, on=['unique_carrier', 'year', 'month'], how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6799\n",
      "3025\n",
      "629\n",
      "419\n"
     ]
    }
   ],
   "source": [
    "print(len(db_passengers2))\n",
    "print(len(db_fuel))\n",
    "print(len(db_flights))\n",
    "print(len(data_merged2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>passengers</th>\n",
       "      <th>distance</th>\n",
       "      <th>total_gallons</th>\n",
       "      <th>dep_delay</th>\n",
       "      <th>arr_delay</th>\n",
       "      <th>monthly_delay</th>\n",
       "      <th>cons_per_mile</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">AA</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>1</th>\n",
       "      <td>11296526.0</td>\n",
       "      <td>3015630.0</td>\n",
       "      <td>283974071.0</td>\n",
       "      <td>494784.0</td>\n",
       "      <td>30903.0</td>\n",
       "      <td>525687.0</td>\n",
       "      <td>94.167411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10745382.0</td>\n",
       "      <td>2896942.0</td>\n",
       "      <td>261946387.0</td>\n",
       "      <td>495890.0</td>\n",
       "      <td>135375.0</td>\n",
       "      <td>631265.0</td>\n",
       "      <td>90.421688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12888804.0</td>\n",
       "      <td>2989934.0</td>\n",
       "      <td>298906244.0</td>\n",
       "      <td>470556.0</td>\n",
       "      <td>-16166.0</td>\n",
       "      <td>454390.0</td>\n",
       "      <td>99.970850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12276405.0</td>\n",
       "      <td>3213436.0</td>\n",
       "      <td>297784292.0</td>\n",
       "      <td>489369.0</td>\n",
       "      <td>38006.0</td>\n",
       "      <td>527375.0</td>\n",
       "      <td>92.668499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12949638.0</td>\n",
       "      <td>3206234.0</td>\n",
       "      <td>318954880.0</td>\n",
       "      <td>864674.0</td>\n",
       "      <td>456674.0</td>\n",
       "      <td>1321348.0</td>\n",
       "      <td>99.479601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">YX</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">2019</th>\n",
       "      <th>5</th>\n",
       "      <td>1626991.0</td>\n",
       "      <td>661909.0</td>\n",
       "      <td>18888.0</td>\n",
       "      <td>245194.0</td>\n",
       "      <td>146565.0</td>\n",
       "      <td>391759.0</td>\n",
       "      <td>0.028536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1709879.0</td>\n",
       "      <td>831004.0</td>\n",
       "      <td>18137.0</td>\n",
       "      <td>380891.0</td>\n",
       "      <td>312039.0</td>\n",
       "      <td>692930.0</td>\n",
       "      <td>0.021825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1673169.0</td>\n",
       "      <td>740277.0</td>\n",
       "      <td>27361.0</td>\n",
       "      <td>311431.0</td>\n",
       "      <td>206056.0</td>\n",
       "      <td>517487.0</td>\n",
       "      <td>0.036960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1680699.0</td>\n",
       "      <td>837487.0</td>\n",
       "      <td>22245.0</td>\n",
       "      <td>340969.0</td>\n",
       "      <td>261211.0</td>\n",
       "      <td>602180.0</td>\n",
       "      <td>0.026562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1506420.0</td>\n",
       "      <td>609329.0</td>\n",
       "      <td>22895.0</td>\n",
       "      <td>75054.0</td>\n",
       "      <td>-61984.0</td>\n",
       "      <td>13070.0</td>\n",
       "      <td>0.037574</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>252 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           passengers   distance  total_gallons  dep_delay  \\\n",
       "unique_carrier year month                                                    \n",
       "AA             2018 1      11296526.0  3015630.0    283974071.0   494784.0   \n",
       "                    2      10745382.0  2896942.0    261946387.0   495890.0   \n",
       "                    3      12888804.0  2989934.0    298906244.0   470556.0   \n",
       "                    4      12276405.0  3213436.0    297784292.0   489369.0   \n",
       "                    5      12949638.0  3206234.0    318954880.0   864674.0   \n",
       "...                               ...        ...            ...        ...   \n",
       "YX             2019 5       1626991.0   661909.0        18888.0   245194.0   \n",
       "                    6       1709879.0   831004.0        18137.0   380891.0   \n",
       "                    7       1673169.0   740277.0        27361.0   311431.0   \n",
       "                    8       1680699.0   837487.0        22245.0   340969.0   \n",
       "                    9       1506420.0   609329.0        22895.0    75054.0   \n",
       "\n",
       "                           arr_delay  monthly_delay  cons_per_mile  \n",
       "unique_carrier year month                                           \n",
       "AA             2018 1        30903.0       525687.0      94.167411  \n",
       "                    2       135375.0       631265.0      90.421688  \n",
       "                    3       -16166.0       454390.0      99.970850  \n",
       "                    4        38006.0       527375.0      92.668499  \n",
       "                    5       456674.0      1321348.0      99.479601  \n",
       "...                              ...            ...            ...  \n",
       "YX             2019 5       146565.0       391759.0       0.028536  \n",
       "                    6       312039.0       692930.0       0.021825  \n",
       "                    7       206056.0       517487.0       0.036960  \n",
       "                    8       261211.0       602180.0       0.026562  \n",
       "                    9       -61984.0        13070.0       0.037574  \n",
       "\n",
       "[252 rows x 7 columns]"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute fuel cons\n",
    "\n",
    "data_merged2['cons_per_mile'] = data_merged2.total_gallons / data_merged2.distance\n",
    "\n",
    "# drop values where total_gallons is zero\n",
    "data_merged2 = data_merged2[data_merged2.total_gallons > 0]\n",
    "\n",
    "data_merged2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Consumptions per flight delays')"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,7))\n",
    "plt.scatter(data_merged2.monthly_delay, data_merged2.cons_per_mile)\n",
    "plt.ylim(0, max(data_merged2.cons_per_mile))\n",
    "plt.ylabel('fuel consumption(in gallons/mile)')\n",
    "plt.xlabel('flight delay (minutes)')\n",
    "plt.title('Consumptions per flight delays')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "\n",
    "By looking at this second graph, it seemd like there are three groups:\n",
    "1. A group of fuel consumptions extremely low - might be an issue with the data - we won,t consider them\n",
    "2. Part of the data is forming a line at 3 gallons per mile of fuel consuption, that has no impact with the flight delay\n",
    "3. The majority of the data is showing high variance and there seems to be higher fuel consuption when delays are higher, especially with longer delays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
